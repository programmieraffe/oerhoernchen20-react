{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","index_es","app","credentials","className","componentId","dataField","title","data","start","end","label","showSearch","simpleOerTags","educational_sectors","style","backgroundColor","size","pagination","URLParams","react","and","render","_ref","ResultListWrapper","map","item","key","_id","Image","src","thumbnail_url","Content","Title","dangerouslySetInnerHTML","__html","Description","join","Array","average_rating_rounded","fill","index","average_rating","original_publication_year","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3afcdc74.chunk.js","sourcesContent":["/* https://medium.appbase.io/how-to-build-a-movie-search-app-with-react-and-elasticsearch-2470f202291c */\n/* app=\"oerhoernchen20\"\n          credentials=\"uPW3Wdmjv:356ded3b-f6ee-4b62-b189-67a0eae0c1f6\"*/\n\n/* https://codesandbox.io/s/github/appbaseio/reactivesearch/tree/next/packages/web/examples/ResultList?from-embed*/\n/* Command Palette: From the command palette (ctrl/cmd + shift + p), type JsPrettier Format Code.*/\nimport React, {\n    Component\n} from 'react';\nimport {\n    ReactiveBase,\n    DataSearch,\n    MultiList,\n    RangeSlider,\n    MultiDataList,\n    SingleRange,\n    SelectedFilters,\n    ResultCard,\n    ResultList,\n    ReactiveList,\n    SingleDropdownRange\n} from '@appbaseio/reactivesearch';\nimport './App.css';\n\n// https://stackoverflow.com/a/39333751\n// 2DO: hot swapping is not possible, change it to dynamic version\n// needs json loader for webpack\n// (does not work by now, because data-prop of multi-list is not updated when values change)\nimport simpleOerTags from './data/simple_oer_tags.json';\n\n\nclass App extends Component {\n\n    /* try to load metadata_fields.json before, did not work */\n    // https://stackoverflow.com/questions/30929679/react-fetch-data-in-server-before-render\n    // https://github.com/appbaseio/reactivesearch/issues/373\n\n    constructor(props) {\n        super(props);\n\n        /*this.state = {\n            simpleTagFields: null\n        };*/\n\n        // This binding is necessary to make `this` work in the callback\n        //this.activateLasers = this.activateLasers.bind(this);\n    }\n\n    componentWillMount() {\n        // does not work right now\n        //this.renderMyData();\n    }\n\n    /*activateLasers(){\n        this.setState({\n          educationalSectorsData:[]\n        });\n    }*/\n\n    renderMyData() {\n\n        // does not work right now :(\n\n        /*fetch('https://raw.githubusercontent.com/programmieraffe/oerhoernchen-simple-tag-fields/master/data.json')\n            .then((response) => response.json())\n            .then((responseJson) => {\n                console.log('reponse', responseJson)\n\n                // convert to reactive-search format\n                // ES6 - https://stackoverflow.com/questions/14379274/how-to-iterate-over-a-javascript-object\n                var educationalSectorsData = [];\n                for (let [key, translation] of Object.entries(responseJson.educational_sectors)) {\n                    console.log(key, translation);\n                    educationalSectorsData.push({'label':translation,'value':key});\n                }   \n\n                this.setState({\n                    educationalSectorsData: educationalSectorsData\n                });\n            })\n            .catch((error) => {\n                console.error(error);\n            });*/\n    }\n\n\n    render() {\n        return (\n\n            <ReactiveBase app = \"oerhoernchen20\"\n            credentials = \"uPW3Wdmjv:356ded3b-f6ee-4b62-b189-67a0eae0c1f6\" >\n\n            {/* <button onClick={this.activateLasers}>\n              Activate Lasers\n            </button> */}\n\n            {/*<div>{JSON.stringify(this.state.educationalSectorsData)}</div>*/}\n\n            <div className = \"row reverse-labels\" >\n            <div className = \"col\" >\n            <SingleDropdownRange componentId = \"BookSensor\"\n            dataField = \"average_rating\"\n            title = \"SingleDropdownRange\"\n            data = {\n                [{\n                    start: 0,\n                    end: 3,\n                    label: 'Rating < 3'\n                }, {\n                    start: 3,\n                    end: 4,\n                    label: 'Rating 3 to 4'\n                }, {\n                    start: 4,\n                    end: 5,\n                    label: 'Rating > 4'\n                }, ]\n            }\n            />\n\n\n\n            <MultiDataList \n            componentId=\"educationalSectorsFilter\"\n            dataField = \"educational_sectors\"\n            className = \"educational-sectors-filter\"\n            title = \"Bildungsbereich\"\n            showSearch = {\n                false\n            }\n            /*size = {\n                100\n            }\n            sortBy = \"asc\"\n            queryFormat = \"or\"\n            selectAllLabel = \"All Languages\"\n            showCheckbox = {\n                true\n            }\n            showSearch = {\n                true\n            }\n            placeholder = \"Search for a language\"*/\n            /*react = {\n                {\n                    and: [\n                        \"mainSearch\",\n                        \"results\",\n                        \"date-filter\",\n                        \"RangeSlider\",\n                        \"genres-list\",\n                        \"revenue-list\"\n                    ]\n                }\n            }*/\n            // 2DO: this does not update\n            //data={this.state.educationalSectorsData}\n            data={simpleOerTags.educational_sectors}\n            // 2DO: URL params takes label, not value (2DO: report issue!)\n            /*URLParams = {\n                true\n            }*/\n            />\n\n            </div> <div className = \"col\"\n            style = {\n                {\n                    backgroundColor: '#fafafa'\n                }\n            } >\n\n            \n            <ReactiveList componentId=\"SearchResult\"\n            dataField = \"title\"\n            size = {\n                3\n            }\n            className = \"result-list-container\"\n            pagination URLParams\n            // add all filters here\n            react={{\n                \"and\": [\"educationalSectorsFilter\"]\n            }}\n            render = {\n                ({\n                    data\n                }) => ( <ReactiveList.ResultListWrapper> {\n                        data.map(item => ( <\n                            ResultList key = {\n                                item._id\n                            } >\n                            <ResultList.Image src = {item.thumbnail_url}/> <ResultList.Content>\n                            <ResultList.Title>\n                            <div className = \"book-title\"\n                            dangerouslySetInnerHTML = {\n                                {\n                                    __html: item.title,\n                                }\n                            }\n                            /> </ResultList.Title> <ResultList.Description>\n                            <div className = \"flex column justify-space-between\">\n                            <div>\n                            <div>\n                            by {\n                                ' '\n                            } <span className = \"authors-list\">Bildungsbereich: {item.educational_sectors && item.educational_sectors.join(\",\")} </span> </div> <div className = \"ratings-list flex align-center\">\n                            <span className = \"stars\"> {\n                                Array(item.average_rating_rounded)\n                                .fill('x')\n                                .map((\n                                    item, // eslint-disable-line\n                                    index,\n                                ) => ( <\n                                    i className = \"fas fa-star\"\n                                    key = {\n                                        index\n                                    } // eslint-disable-line\n                                    />\n                                ))\n                            } </span> <span className = \"avg-rating\" >\n                            ({\n                                    item.average_rating\n                                }\n                                avg) </span> </div> </div> <span className = \"pub-year\" >\n                            Pub {\n                                item.original_publication_year\n                            } </span> </div> </ResultList.Description> </ResultList.Content > </ResultList>\n                        ))\n                    } </ReactiveList.ResultListWrapper>\n                )\n            }\n            /> </div> </div> </ReactiveBase>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}